<?xml version="1.0"?>
<launch>
  <arg name="config_package" default="$(optenv ROBOT_NAVIGATION_CONFIG_PACKAGE robot_bringup)"/>
  <arg name="config_folder" default="config/navigation"/>
  <arg name="config_path" default="$(eval find(config_package) + '/' + config_folder)"/>

  <arg name="id_robot" default="$(optenv ROBOT_ID robot)"/>
  <arg name="robot_model" default="$(optenv ROBOT_MODEL summit_xl)"/>

  <!-- Dockers arguments -->
  <arg name="has_docker" default="$(optenv ROBOT_HAS_DOCKER false)"/>
  <arg name="run_laser_filters" default="$(optenv ROBOT_RUN_LASER_FILTERS true)"/>
  <arg name="docking_qr" default="$(optenv ROBOT_RUN_AR_LOCATOR true)"/>
  <arg name="docking_laser" default="$(optenv ROBOT_RUN_REFLECTOR_LOCATOR true)"/>

  <arg name="laser_id_1" default="$(optenv ROBOT_LASER_1_ID front_laser)"/>
  <arg name="laser_id_2" default="$(optenv ROBOT_LASER_2_ID none)"/>
  <arg name="laser_id_3" default="$(optenv ROBOT_LASER_3_ID none)"/>

  <!-- Move arguments-->
  <arg name="run_move" default="$(optenv ROBOT_RUN_MOVE true)"/>

  <arg name="run_move_base" default="$(optenv ROBOT_RUN_MOVE_BASE true)"/>
  <arg name="run_merge_scan" default="$(optenv ROBOT_RUN_MERGE_SCAN false)" />
  <arg name="run_safety_controller" default="$(optenv ROBOT_NAVIGATION_RUN_SAFETY_CONTROLLER true)" />

  <!-- Safety controller arguments -->
  <arg name="has_safety_controller_move" default="false"/>
  <arg name="has_safety_controller_docker" default="false"/>
  <arg name="safety_controller_config_move" default="$(find robot_bringup)/config/navigation/safety_controller/$(arg robot_model)_move.yaml" />
  <arg name="safety_controller_config_docker" default="$(find robot_bringup)/config/navigation/safety_controller/$(arg robot_model)_docker.yaml" />

	<group ns="$(arg id_robot)">

      <include if="$(arg has_docker)" file="$(find robot_bringup)/launch/navigation/dockers.launch">
        <arg name="config_path" value="$(arg config_path)/dockers"/>
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="has_safety_controller" value="$(arg has_safety_controller_docker)"/>
      </include>

      <include if="$(arg run_move)" file="$(find robot_bringup)/launch/navigation/move.launch">
        <arg name="config_path" value="$(arg config_path)/move"/>
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="has_safety_controller" value="$(arg has_safety_controller_move)"/>
      </include>

      <include if="$(arg run_move_base)" file="$(find robot_bringup)/launch/navigation/move_base.launch">
        <arg name="config_path" value="$(arg config_path)/move_base"/>
        <arg name="id_robot" value="$(arg id_robot)"/>
      </include>

      <include if="$(arg run_move_base)" file="$(find robot_bringup)/launch/navigation/move_base_flex.launch">
        <arg name="config_path" value="$(arg config_path)/move_base"/>
        <arg name="id_robot" value="$(arg id_robot)"/>
      </include>

      <include if="$(arg run_move_base)" file="$(find robot_bringup)/launch/navigation/robotnik_move_base_flex.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
      </include>

      
      <include if="$(arg has_docker)" file="$(find robot_bringup)/launch/navigation/tf_publishers.launch">
        <arg name="docking_qr" value="$(arg docking_qr)"/>
        <arg name="docking_laser_reflector" value="$(arg docking_laser)"/>
      </include>


      <group if="$(arg run_laser_filters)">

        <include if="$(eval laser_id_1 != 'none')" file="$(find robot_bringup)/launch/navigation/scan_filter.launch">
          <arg name="node_name" value="scan_filter_1"/>
          <arg name="input_scan" value="$(arg laser_id_1)/scan"/>
          <arg name="output_scan" value="$(arg laser_id_1)/scan_filtered"/>
          <arg name="config_file" value="scan_filter.yaml"/>
        </include>

        <include if="$(eval laser_id_2 != 'none')" file="$(find robot_bringup)/launch/navigation/scan_filter.launch">
          <arg name="node_name" value="scan_filter_2"/>
          <arg name="input_scan" value="$(arg laser_id_2)/scan"/>
          <arg name="output_scan" value="$(arg laser_id_2)/scan_filtered"/>
          <arg name="config_file" value="scan_filter.yaml"/>
        </include>

        <include if="$(eval laser_id_3 != 'none')" file="$(find robot_bringup)/launch/navigation/scan_filter.launch">
          <arg name="node_name" value="scan_filter_3"/>
          <arg name="input_scan" value="$(arg laser_id_3)/scan"/>
          <arg name="output_scan" value="$(arg laser_id_3)/scan_filtered"/>
          <arg name="config_file" value="scan_filter.yaml"/>
        </include>

      </group>

      <include if="$(arg run_merge_scan)" file="$(find robot_bringup)/launch/navigation/merge_scan.launch"/>
      
      <include if="$(arg run_safety_controller)" file="$(find robot_bringup)/launch/navigation/safety_controller.launch"/>
      
      <include if="$(arg has_safety_controller_move)" file="$(find robot_bringup)/launch/bringup/robotnik_safety_controller.launch">
          <arg name="node_name" value="safety_controller_move"/>
          <arg name="safety_controller_config" value="$(arg safety_controller_config_move)"/>
        </include>

        <include if="$(arg has_safety_controller_docker)" file="$(find robot_bringup)/launch/bringup/robotnik_safety_controller.launch">
          <arg name="node_name" value="safety_controller_docker"/>
          <arg name="safety_controller_config" value="$(arg safety_controller_config_docker)"/>

        </include>
	</group>

</launch>
